/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cn.proxys;

import cn.proxys.impl.CheckProxy;
import cn.proxys.impl.DownAndUpload;
import cn.proxys.impl.pull.PullProxysImpl;
import cn.proxys.utils.FileUtils;
import cn.proxys.utils.TextUtils;
import cn.proxys.utils.Threads;
import ff.jnezha.jnt.cs.GithubHelper;

import java.util.concurrent.CopyOnWriteArrayList;

public class Main {


    private static volatile CopyOnWriteArrayList<String> proxys = new CopyOnWriteArrayList<String>();
    private static volatile StringBuilder sb = new StringBuilder();
    private static String token = System.getenv("GITHUB_TOKEN");

    //https://raw.githubusercontent.com/parserpp/ip_ports/main/proxyinfo.txt
    //https://cdn.jsdelivr.net/gh/parserpp/ip_ports/proxyinfo.txt
    public static void main(String[] args) {

        getTokean(args);
        PullProxysImpl.pull();
        DownAndUpload.down();
        checkAndsave();
    }

    private static void checkAndsave() {
        for (int i = 0; i < proxys.size(); i++) {
            postToCheck(proxys.get(i));
        }
        Threads.waitForAsyncTask();

        if (!TextUtils.isEmpty(token)) {
            //        updateContent(String owner, String repo, String path, String token, String contentWillBase64, String commitMsg) {
            GithubHelper.updateContent("parserpp", "ip_ports", "/proxyinfo.txt", token, sb.toString(), "UPDATE FOR ALIVE");

        } else {
            FileUtils.saveTextToFile("result.txt", sb.toString(), false);
            System.out.println("最终解雇:" + sb.toString());
        }
    }

    private static void getTokean(String[] args) {
        if (args.length > 0) {
            token = args[0];
        }
        if (TextUtils.isEmpty(token)) {
            System.err.println("token is null");
        } else {
            System.out.println("token is ok");
        }
    }

    private static void postToCheck(final String proxy) {
        String[] s = proxy.split(":");
        final String ip = s[0];
        final int port = Integer.valueOf(s[1]);
        Threads.sumbit(new Runnable() {
            @Override
            public void run() {

                if (CheckProxy.isConnnectedByBaidu(ip, port) || CheckProxy.isConnnectedByWandoujia(ip, port)) {
                    if (CheckProxy.isConnnectedIpA(ip, port) || CheckProxy.isConnnectedIpB(ip, port)
                            || CheckProxy.isConnnectedIpC(ip, port)
                    ) {
                        addAliveIp(ip, port);
                    }
                }


            }
        });
    }

    private static void addAliveIp(String ip, int port) {
        sb.append(ip).append(":").append(port).append("\n");
    }


    public static synchronized void addResult(String ip, int port) {
        addResult(ip + ":" + port);
    }

    public static synchronized void addResult(String ip, String port) {
        addResult(ip + ":" + port);
    }

    public static void addResult(String proxy) {
        if (!proxys.contains(proxy)) {
            proxys.add(proxy);
        }
    }


}

